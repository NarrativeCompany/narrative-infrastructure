---
# tasks file for service.neo-python

- name: Mount /dev/sdb to /opt/neo-python.
  mount:
    src: /dev/sdb
    path: /opt/neo-python
    fstype: ext4
    opts: defaults
    state: mounted

- name: Create the /opt/neo-python directory.
  file:
    path: /opt/neo-python
    owner: '1000'
    group: '1000'
    state: directory

- name: Create the /opt/textfile_collector directory.
  file:
    path: /opt/textfile_collector
    owner: bot-ops
    group: bot-ops
    state: directory

- name: Check if /opt/neo-python/Chains/Main exists.
  stat:
    path: /opt/neo-python/Chains/Main
  register: main_dir

- name: Check if /opt/neo-python/Chains/Main_Notif exists.
  stat:
    path: /opt/neo-python/Chains/Main_Notif
  register: notify_dir

- name: Download Main_latest.tar.gz (based on neo_block_number variable).
  command: wget https://neo-python-chain.narrative.org/Main_{{ neo_block_number | default('latest') }}.tar.gz
  args:
    chdir: /opt/neo-python
  warn: False
  when: not main_dir.stat.exists

- name: Extract Main_latest.tar.gz (based on neo_block_number variable).
  shell: tar -xzvf /opt/neo-python/Main_{{ neo_block_number | default('latest') }}.tar.gz
  args:
    chdir: /opt/neo-python
  async: 1000
  poll: 0
  register: extract_main_tar
  warn: False
  when: not main_dir.stat.exists

- name: Check the extract (this will take a long time, it checks every 10 seconds, 360 times (1 hour)).
  async_status:
    jid: "{{ extract_main_tar.ansible_job_id }}"
  register: result_main
  until: result_main.finished
  retries: 360
  delay: 10

- name: Remove Main_latest.tar.gz if it exists (based on neo_block_number variable).
  file:
    path: /opt/neo-python/Main_{{ neo_block_number | default('latest') }}.tar.gz
    state: absent

- name: Download Main_Notif_latest.tar.gz.
  command: wget https://neo-python-chain.narrative.org/Main_Notif_{{ neo_block_number | default('latest') }}.tar.gz
  args:
    chdir: /opt/neo-python
  warn: False
  when: not notify_dir.stat.exists

- name: Extract Main_Notif_latest.tar.gz (based on neo_block_number variable).
  shell: tar -xzvf /opt/neo-python/Main_Notif_{{ neo_block_number | default('latest') }}.tar.gz
  args:
    chdir: /opt/neo-python
  async: 1000
  poll: 0
  register: extract_tar
  warn: False
  when: not notify_dir.stat.exists

- name: Check the extract (this will take a long time, it checks every 10 seconds, 360 times (1 hour)).
  async_status:
    jid: "{{ extract_tar.ansible_job_id }}"
  register: result
  until: result.finished
  retries: 360
  delay: 10

- name: Remove Main_Notif_latest.tar.gz if it exists (based on neo_block_number variable).
  file:
    path: /opt/neo-python/Main_Notif_{{ neo_block_number | default('latest') }}.tar.gz
    state: absent

- name: Recusivly chown /opt/neo-python/Chains as bot-ops:bot-ops.
  file:
    path: /opt/neo-python/Chains
    owner: 'bot-ops'
    group: 'bot-ops'
    recurse: yes
  when: not main_dir.stat.exists or not notify_dir.stat.exists

- name: Create the neo-python.service file.
  template:
    src: neo-python.service.j2
    dest: /etc/systemd/system/neo-python.service
  notify: restart_neo-python

- name: Create the restart-neo-python cron file.
  copy:
    src: restart-neo-python
    dest: /etc/cron.hourly/restart-neo-python
    mode: '0755'

- name: Create the neo-block-monitor.sh file.
  copy:
    src: neo-block-monitor.sh
    dest: /usr/local/bin/neo-block-monitor.sh
    mode: u=rx,g=rx,o=rx

- name: Create the neo-block-monitor.service file.
  copy:
    src: neo-block-monitor.service
    dest: /etc/systemd/system/neo-block-monitor.service

- name: Create the neo-block-monitor.timer file.
  copy:
    src: neo-block-monitor.timer
    dest: /etc/systemd/system/neo-block-monitor.timer

- name: Flush handlers (restart neo-python if necessary).
  meta: flush_handlers

- name: Start neo-python.
  systemd:
    name: neo-python
    state: started
    enabled: yes
    daemon_reload: yes

- name: Start neo-block-monitor.timer.
  systemd:
    name: neo-block-monitor.timer
    state: started
    enabled: yes
    daemon_reload: yes

